{"version":3,"sources":["redux/contact/contact-operations.js","redux/contact/contact-selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filters/Filters.js","components/contactsEditor/contactsEditor.js"],"names":["name","number","dispatch","a","contacts","addContactsRequest","axios","post","data","addContactsSuccess","addContactsError","message","contactsId","deleteContactsRequest","delete","then","deleteContactsSuccess","catch","error","deleteContactsError","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","getContacts","state","items","getFilter","filter","getvisibleContacts","createSelector","normalizedFilter","toLowerCase","contact","includes","ContactItem","id","onRemove","className","type","onClick","connect","contactsSelectors","onRemoveContact","contactOperations","map","ContactForm","handleSubmitForm","e","preventDefault","props","onSubmit","some","alert","setState","handleChange","currentTarget","value","this","fetchContacts","pattern","title","required","onChange","placeholder","Component","changeFilter","target","ContactsEditor"],"mappings":"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","file":"static/js/3.69212820.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n  addContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  deleteContactsError,\n  deleteContactsRequest,\n  deleteContactsSuccess,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contact-actions';\n\nconst fetchContacts = (name, number) => async dispatch => {\n  const contacts = { name, number };\n  \n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get('/contacts', contacts);\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\n\nconst addContacts = (name, number) => async dispatch => {\n  const contacts = { name, number };\n\n  dispatch(addContactsRequest());\n  try {\n    const { data } = await axios.post(\"/contacts\", contacts);\n    dispatch(addContactsSuccess(data));\n  } catch (error) {\n    dispatch(addContactsError(error.message)); \n  }\n};\n\nconst deleteContact = contactsId => dispatch => {\n    dispatch(deleteContactsRequest());\n\n    axios\n      .delete(`/contacts/${contactsId}`)\n      .then(() => dispatch(deleteContactsSuccess(contactsId)))\n      .catch((error) => deleteContactsError(error.message));\n}\n\nexport default {\n  addContacts,\n  deleteContact,\n  fetchContacts,\n}; ","import { createSelector } from '@reduxjs/toolkit';\nconst getContacts = state => state.contacts.items;\n \nconst getFilter = state => state.contacts.filter;\n\nconst getvisibleContacts = createSelector(\n    [ getContacts, getFilter],\n    (contacts, filter) => {\n        const normalizedFilter = filter.toLowerCase();\n        return contacts.filter((contact) =>\n           contact.name.toLowerCase().includes(normalizedFilter)\n        );\n    },\n)\nexport default {\n  getContacts,\n  getFilter,\n  getvisibleContacts,\n};","import './ContactList.scss';\nimport { connect } from 'react-redux';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\n\nconst ContactItem = ({ id, name, number , onRemove }) => {\n    return (\n        <li className=\"Contact-List\" key={id}> \n            {name}: {number} <button className=\"Button-List\" type=\"submit\" onClick={() => onRemove(id)}>Delete</button>\n        </li>\n    )\n}\n\nconst ContactList = ({ contacts, onRemoveContact }) => {\n    return (\n      <ul>\n        {contacts.map((contact) => (\n          <ContactItem\n            key={contact.id}\n            id={contact.id}\n            name={contact.name}\n            number={contact.number}\n            onRemove={onRemoveContact}\n          />\n        ))}\n      </ul>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getvisibleContacts(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  onRemoveContact: (id) => dispatch(contactOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import  { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './ContactForm.scss';\nimport { contactOperations, contactsSelectors } from \"../../redux/contact\";\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  handleSubmitForm = e => {\n    e.preventDefault();\n    const { onSubmit, contacts } = this.props;\n    const { name, number } = this.state;\n\n    if (!name) {\n      return;\n    }\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.toLowerCase(),\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    onSubmit(name, number);\n    this.setState({ name: '', number: '' });\n  };\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  render() {\n    return (\n      <form className=\"Form\" onSubmit={this.handleSubmitForm}>\n        <label className=\"Label\">\n          Name{' '}\n          <input\n            className=\"Input\"\n            id={this.state.id}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n            placeholder=\"name\"\n          />\n        </label>\n        <label>\n          Number{' '}\n          <input\n            className=\"Input\"\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className=\"Button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactOperations.addContacts(name, number)),\n  fetchContacts: (name, number) =>\n    dispatch(contactOperations.fetchContacts(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './Filters.scss';\nimport { connect } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contact';\n\nconst Filter = ({ filter, changeFilter }) => {\n  return (\n    <>\n        <h3> Find contacts by me </h3>\n      <input className=\"Input-Filter\"\n        type=\"text\"\n        name=''\n        value={filter}\n        onChange={changeFilter}\n      />\n    </>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  changeFilter: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  changeFilter: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport  { Component } from 'react';\nimport ContactList from '../ContactList';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filters';\n\nimport './contactsEditor.scss';\n\nclass ContactsEditor extends Component {\n    state = {\n        contacts: [],\n        filter: '',\n    }\n    \n    handleSubmitForm = (contact) => {\n        this.setState(({contacts}) => ({\n            contacts: [...contacts, contact],\n        }));\n    }\n\n    render() {\n        return (\n            <div className='Phonebook'>\n                <h1 className='Phonebook-title'>Phonebook</h1>\n                  <ContactForm  />\n                <h2>Contacts</h2>\n               \n                <Filter />\n            \n                <ContactList  />\n            </div>\n        );\n    }\n}\n \n\n\n\nexport default ContactsEditor;\n\n\n\n\n"],"sourceRoot":""}